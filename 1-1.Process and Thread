## Multithreading - Difference between Process and Thread (Keyword - Process, Thread)

#### (1) process

- 운영체제에서 할당받는 자원의 단위 (실행중인 프로그램)

- CPU 동작 시간, 주소공간이 독립적 ex.게임, 크롬, vscode 각각 실행

- code 영역, data영역, stack영역, heap 영역 -> 독립적

- 최소 1개의 메인 스레드 보유함

- 파이프, 파일, 소켓 등을 사용하여 프로세스간 통신을 함(cost가 높음) -> Context Swithcing비용이 큼

#### (2) Thread

- 프로세스 내 실행 흐름 단위

- 프로세스 자원 사용

- stack만 별도 할당 나머지는 공유(Code, Data, Heap)

- 메모리 공유(변수 공유)

- 한 스레드의 결과가 다른 스레드의 영향을 끼친다.

- 동기화 문제 주의 필요(디버깅이 어렵기 때문, 로그 등이 잘 안나올 수 있음)



#### (3) Multi-Thread

- 한 개의 단일 어플리케이션(응용프로그램) -> 여러 스레드로 구성 후 작업 처리

- 시스템 자원 소모가 감소(하나의 프로세스 안에서 스레드로 할당 받으면 공유하고 있는 자원때문에 효율적), 처리량 증가(Cost 감소)

- 통신 부담 감소, 디버깅 어려움, 단일 프로세스에는 효과가 미약, 자원 공유 문제(교착 상태), 프로세스 영향 준다

#### (4) Multi-Process

- 한 개의 단일 어플리케이션(응용프로그램) -> 여러 프로세스로 구성 후 작업 처리

- 한 개의 프로세스 문제 발생은 확산 없음(process kill)

- 캐시 체인지를 활용, Cost비용이 매우 높음(오버헤드), 복잡한 통신 방식을 사용



참고

[Process vs. Thread | Baeldung on Computer Science](https://www.baeldung.com/cs/process-vs-thread)




